(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.state={points:[],polygonDrawn:!1,selectedFirst:null,selectedSecond:null,clockwise:!0,creatingPoints:!1,selectingFirst:!1,selectingSecond:!1}}connectedCallback(){this.shadowRoot.innerHTML='\n                    <style>:host {\r\n    --bg-color: #1a1a1a;\r\n    --panel-bg: #2d2d2d;\r\n    --accent: #4a9eff;\r\n    --text: #ffffff;\r\n}\r\n\r\n@keyframes point-appear {\r\n    0% { transform: translate(-50%, -50%) scale(0); }\r\n    80% { transform: translate(-50%, -50%) scale(1.1); }\r\n    100% { transform: translate(-50%, -50%) scale(1); }\r\n}\r\n\r\n@keyframes path-draw {\r\n    from { stroke-dashoffset: 10000; }\r\n    to { stroke-dashoffset: 0; }\r\n}\r\n\r\n.app {\r\n    display: flex;\r\n    height: 100vh;\r\n    background: var(--bg-color);\r\n    color: var(--text);\r\n}\r\n\r\n.workspace {\r\n    flex: 1;\r\n    position: relative;\r\n    border: 1px solid #3d3d3d;\r\n    transition: border-color 0.3s ease;\r\n}\r\n\r\n.panel {\r\n    width: 300px;\r\n    padding: 20px;\r\n    background: var(--panel-bg);\r\n    border-left: 1px solid #3d3d3d;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 12px;\r\n    font-family: \'Montserrat\', sans-serif;\r\n    text-transform: uppercase;\r\n}\r\n\r\n.button-container {\r\n    display: flex;\r\n    gap: 10px;\r\n    width: 100%;\r\n}\r\n\r\n.selected-point-cell {\r\n    padding: 10px;\r\n    border: none;\r\n    border-radius: 6px;\r\n    background: #3d3d3d;\r\n    color: var(--text);\r\n    font-weight: 500;\r\n    font-family: \'Montserrat\', sans-serif;\r\n    font-size: 14px;\r\n    text-transform: uppercase;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 39px;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.point {\r\n    position: absolute;\r\n    width: 24px;\r\n    height: 24px;\r\n    background: var(--accent);\r\n    border-radius: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: var(--text);\r\n    font-size: 12px;\r\n    cursor: pointer;\r\n    z-index: 1;\r\n    transition: all 0.2s ease;\r\n    animation: point-appear 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\r\n}\r\n\r\n.point:hover {\r\n    transform: translate(-50%, -50%) scale(1.1);\r\n    filter: brightness(1.2);\r\n}\r\n\r\nbutton {\r\n    padding: 10px 16px;\r\n    border: none;\r\n    border-radius: 6px;\r\n    background: #3d3d3d;\r\n    color: var(--text);\r\n    cursor: pointer;\r\n    transition: all 0.2s ease;\r\n    font-weight: 500;\r\n    font-family: \'Montserrat\', sans-serif;\r\n    font-size: 14px;\r\n    text-transform: uppercase;\r\n    min-width: 240px;\r\n    height: 39px;\r\n}\r\n\r\nbutton:hover:not(:disabled) {\r\n    background: var(--accent);\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 12px rgba(74, 158, 255, 0.2);\r\n}\r\n\r\nbutton:active:not(:disabled) {\r\n    transform: translateY(0);\r\n}\r\n\r\nbutton:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n}\r\n\r\n.path-info {\r\n    margin-top: auto;\r\n    padding: 12px;\r\n    background: #3d3d3d;\r\n    border-radius: 6px;\r\n    font-size: 14px;\r\n    transition: all 0.3s ease;\r\n}\r\n\r\n.point-count {\r\n    padding: 8px;\r\n    border-radius: 4px;\r\n    background: #3d3d3d;\r\n    transition: all 0.3s ease;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\nsvg {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 0;\r\n}\r\n\r\n.path {\r\n    stroke-dasharray: 10000;\r\n    stroke-dashoffset: 10000;\r\n    animation: path-draw 3s ease-out forwards;\r\n}</style>\n                    <div class="app">\n                        <div class="workspace"></div>\n                        <div class="panel">\n                            <button id="createPoints">‚ú® Create points</button>\n                            <div id="pointCount" class="point-count">Points: 0</div>\n                            <button id="drawPolygon" disabled>üñåÔ∏è Draw polygon</button>\n                            <div class="button-container">\n                                <button id="firstPoint" disabled>üìç First point</button>\n                                <span id="firstPointLabel" class="selected-point-cell"></span>\n                            </div>\n                            <div class="button-container">\n                                <button id="secondPoint" disabled>üéØ Second point</button>\n                                <span id="secondPointLabel" class="selected-point-cell"></span>\n                            </div>\n                            <button id="toggleDirection" disabled>üîÑ Clockwise</button>\n                            <button id="clear">üßπ Clear</button>\n                            <div id="pathInfo" class="path-info"></div>\n                        </div>\n                    </div>\n                    ',this.initElements(),this.setupEventListeners(),this.loadState(),this.updateUI()}initElements(){this.workspace=this.shadowRoot.querySelector(".workspace"),this.createPointsBtn=this.shadowRoot.getElementById("createPoints"),this.drawPolygonBtn=this.shadowRoot.getElementById("drawPolygon"),this.firstPointBtn=this.shadowRoot.getElementById("firstPoint"),this.secondPointBtn=this.shadowRoot.getElementById("secondPoint"),this.toggleDirectionBtn=this.shadowRoot.getElementById("toggleDirection"),this.clearBtn=this.shadowRoot.getElementById("clear"),this.pointCountDiv=this.shadowRoot.getElementById("pointCount"),this.firstPointLabel=this.shadowRoot.getElementById("firstPointLabel"),this.secondPointLabel=this.shadowRoot.getElementById("secondPointLabel"),this.pathInfoDiv=this.shadowRoot.getElementById("pathInfo")}setupEventListeners(){this.createPointsBtn.addEventListener("click",(()=>this.startCreatingPoints())),this.drawPolygonBtn.addEventListener("click",(()=>this.drawPolygon())),this.firstPointBtn.addEventListener("click",(()=>this.startSelectingFirst())),this.secondPointBtn.addEventListener("click",(()=>this.startSelectingSecond())),this.toggleDirectionBtn.addEventListener("click",(()=>this.toggleDirection())),this.clearBtn.addEventListener("click",(()=>this.clear())),this.workspace.addEventListener("click",(t=>this.handleWorkspaceClick(t)))}handleWorkspaceClick(t){if(this.state.creatingPoints&&!this.state.polygonDrawn){const e=this.workspace.getBoundingClientRect(),n=t.clientX-e.left,s=t.clientY-e.top;this.addPoint(n,s)}else if(this.state.selectingFirst||this.state.selectingSecond){let e=t.target;for(;e&&e!==this.workspace;){if(e.classList.contains("point")){const t=parseInt(e.dataset.index);this.state.selectingFirst?(this.state.selectedFirst=t,this.state.selectingFirst=!1):(this.state.selectedSecond=t,this.state.selectingSecond=!1),this.updateSelectedPoints(),this.drawPath();break}e=e.parentElement}}}renderPoint(t){const e=document.createElement("div");e.className="point",e.style.left=`${t.x}px`,e.style.top=`${t.y}px`,e.dataset.index=t.index,e.textContent=t.index+1,this.workspace.appendChild(e)}updatePointCount(){const t=this.state.points.length;this.pointCountDiv.textContent=`Points: ${t}`,this.pointCountDiv.style.color=t<3||t>15?"red":"green"}createSVG(){let t=this.workspace.querySelector("svg");return t||(t=this.createSVGElement("svg",{width:"100%",height:"100%"}),this.workspace.appendChild(t)),t}createSVGElement(t,e){const n=document.createElementNS("http://www.w3.org/2000/svg",t);return Object.entries(e).forEach((([t,e])=>{n.setAttribute(t,e)})),n}startSelectingFirst(){this.state.selectingFirst=!0,this.state.selectingSecond=!1,this.firstPointBtn.textContent="Selecting...",this.secondPointBtn.textContent="üéØ Second point"}startSelectingSecond(){this.state.selectingSecond=!0,this.state.selectingFirst=!1,this.secondPointBtn.textContent="Selecting...",this.firstPointBtn.textContent="üìç First point"}drawPath(){if(null===this.state.selectedFirst||null===this.state.selectedSecond)return;const t=this.createSVG();let e=t.querySelector(".path");e&&e.remove();const n=this.calculatePathPoints();0!==n.length&&(e=this.createSVGElement("polyline",{class:"path",fill:"none",stroke:"blue","stroke-width":"2"}),e.setAttribute("points",n.map((t=>`${t.x},${t.y}`)).join(" ")),t.appendChild(e),this.updatePathInfo(n))}calculatePathPoints(){const{points:t,selectedFirst:e,selectedSecond:n,clockwise:s}=this.state;if(e===n)return[];const i=t.length,o=[];let r=e;for(;r!==n;)o.push(t[r]),r=s?(r+1)%i:(r-1+i)%i;return o.push(t[n]),o}updatePathInfo(t){const e=t.map((t=>`Point ${t.index+1}`)).join(" ‚Üí ");this.pathInfoDiv.textContent=`Path: ${e}`}startCreatingPoints(){this.state.polygonDrawn||(this.state.creatingPoints=!0,this.updateUI())}updateUI(){this.drawPolygonBtn.disabled=!(this.state.points.length>=3&&this.state.points.length<=15&&!this.state.polygonDrawn),this.firstPointBtn.disabled=!this.state.polygonDrawn,this.secondPointBtn.disabled=!this.state.polygonDrawn,this.toggleDirectionBtn.disabled=!(null!==this.state.selectedFirst&&null!==this.state.selectedSecond)}saveState(){const t={points:this.state.points,polygonDrawn:this.state.polygonDrawn,selectedFirst:this.state.selectedFirst,selectedSecond:this.state.selectedSecond,clockwise:this.state.clockwise};localStorage.setItem("polygonState",JSON.stringify(t))}loadState(){const t=localStorage.getItem("polygonState");if(t)try{const e=JSON.parse(t);this.state.points=e.points,this.state.polygonDrawn=e.polygonDrawn,this.state.selectedFirst=e.selectedFirst,this.state.selectedSecond=e.selectedSecond,this.state.clockwise=e.clockwise,this.state.points.forEach((t=>this.renderPoint(t))),this.state.polygonDrawn&&this.drawPolygon(),null!==this.state.selectedFirst&&null!==this.state.selectedSecond&&this.drawPath(),this.updateSelectedPoints(),this.toggleDirectionBtn.textContent=this.state.clockwise?"üîÑ Clockwise":"üîÑ Counterclockwise"}catch(t){console.error("Error loading state:",t),this.clearStorage()}}clearStorage(){localStorage.removeItem("polygonState")}clear(){this.state={points:[],polygonDrawn:!1,selectedFirst:null,selectedSecond:null,clockwise:!0,creatingPoints:!1,selectingFirst:!1,selectingSecond:!1},this.workspace.innerHTML="",this.updatePointCount(),this.firstPointLabel.textContent="",this.secondPointLabel.textContent="",this.pathInfoDiv.textContent="",this.updateUI(),this.clearStorage()}addPoint(t,e){if(this.state.points.length>=15)return;const n={x:t,y:e,index:this.state.points.length};this.state.points.push(n),this.renderPoint(n),this.updatePointCount(),this.drawPolygonBtn.disabled=this.state.points.length<3||this.state.points.length>15,this.saveState()}drawPolygon(){const t=this.createSVG(),e=this.state.points.map((t=>`${t.x},${t.y}`)).join(" "),n=this.createSVGElement("polygon",{points:e,fill:"none",stroke:"grey"});t.innerHTML="",t.appendChild(n),this.state.polygonDrawn=!0,this.state.creatingPoints=!1,this.updateUI(),this.saveState()}updateSelectedPoints(){this.firstPointLabel.textContent=null!==this.state.selectedFirst?`P: ${this.state.selectedFirst+1}`:"",this.secondPointLabel.textContent=null!==this.state.selectedSecond?`P: ${this.state.selectedSecond+1}`:"",this.updateUI(),this.saveState()}toggleDirection(){this.state.clockwise=!this.state.clockwise,this.toggleDirectionBtn.textContent=this.state.clockwise?"üîÑ Clockwise":"üîÑ Counterclockwise",this.drawPath(),this.saveState()}}customElements.define("polygon-creator",t)})();